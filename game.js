class PetGame {
    constructor() {
        this.user = null;
        this.currentPet = null;
        this.inventory = {
            pets: [],
            accessories: []
        };
        this.init();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            this.tg = window.Telegram.WebApp;
            this.tg.expand();
            this.tg.enableClosingConfirmation();
        }

        await this.loadUserData();
        this.setupEventListeners();
        this.updateUI();
        this.startBackgroundProcesses();
        
        console.log('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
        console.log('üêæ –¢–µ–∫—É—â–∏–π –ø–∏—Ç–æ–º–µ—Ü:', this.currentPet);
    }

    async loadUserData() {
        const savedData = localStorage.getItem('petGameData');
        
        if (savedData) {
            try {
                const data = JSON.parse(savedData);
                this.user = data.user;
                this.inventory = data.inventory;
                this.currentPet = data.currentPet;
                console.log('üìÅ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
                this.createNewUser();
            }
        } else {
            this.createNewUser();
        }
    }

    createNewUser() {
        console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const tgUser = this.tg?.initDataUnsafe?.user;
        
        this.user = {
            id: tgUser?.id || Math.floor(Math.random() * 1000000),
            firstName: tgUser?.first_name || '–ò–≥—Ä–æ–∫',
            photoUrl: tgUser?.photo_url || 'https://via.placeholder.com/32',
            currencies: {
                grains: 1000,
                gromd: 0,
                ton: 0,
                stars: 100
            },
            isAdmin: true // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –∞–¥–º–∏–Ω
        };

        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        const starterPet = {
            id: '1.0.0.0.0',
            petId: 1,
            accessories: [0, 0, 0, 0, 0],
            level: 1,
            satiety: 50, // –ù–∞—á–∏–Ω–∞–µ–º —Å 50% –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            grainsEarned: 0,
            gromdEarned: 0,
            lastFed: Date.now(),
            isBreeding: false,
            breedStartTime: null
        };

        this.inventory.pets = [starterPet];
        this.currentPet = starterPet;
        
        this.saveGame();
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    }

    setupEventListeners() {
        console.log('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const screen = e.currentTarget.dataset.screen;
                this.showScreen(screen);
                console.log('üñ•Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screen);
            });
        });

        // –í–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const tab = e.currentTarget.dataset.tab;
                this.showTab(tab);
            });
        });

        // –î–µ–π—Å—Ç–≤–∏—è —Å –ø–∏—Ç–æ–º—Ü–µ–º - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
        document.getElementById('feed-btn').addEventListener('click', () => {
            console.log('üçñ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è');
            this.feedPet();
        });

        document.getElementById('breed-btn').addEventListener('click', () => {
            console.log('‚ù§Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è');
            this.startBreeding();
        });

        // –ö–Ω–æ–ø–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
        document.getElementById('exchange-btn').addEventListener('click', () => {
            this.showExchangeModal();
        });

        document.getElementById('withdraw-btn').addEventListener('click', () => {
            this.showWithdrawModal();
        });

        // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        document.getElementById('admin-btn').addEventListener('click', () => {
            this.toggleAdminPanel();
        });

        document.getElementById('reset-game-btn').addEventListener('click', () => {
            this.resetGame();
        });

        document.getElementById('add-currency-btn').addEventListener('click', () => {
            this.addCurrency();
        });

        document.getElementById('view-players-btn').addEventListener('click', () => {
            this.viewPlayers();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–µ
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.admin-panel') && !e.target.closest('.admin-btn')) {
                document.getElementById('admin-panel').classList.add('hidden');
            }
        });

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    showScreen(screenName) {
        console.log('üñ•Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω:', screenName);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenName);
        if (targetScreen) {
            targetScreen.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.screen === screenName) {
                btn.classList.add('active');
            }
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Ä–∞–Ω–∞
        if (screenName === 'inventory-screen') {
            this.loadInventoryData();
        } else if (screenName === 'market-screen') {
            this.loadMarketData();
        }
    }

    showTab(tabName) {
        console.log('üìë –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.tab === tabName) {
                btn.classList.add('active');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });

        const targetTab = document.getElementById(tabName + '-tab');
        if (targetTab) {
            targetTab.classList.add('active');
        }
    }

    updateUI() {
        if (!this.user || !this.currentPet) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞');
            return;
        }

        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        document.getElementById('user-photo').src = this.user.photoUrl;
        document.getElementById('user-name').textContent = this.user.firstName;
        document.getElementById('user-id').textContent = this.user.id;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã –≤ —à–∞–ø–∫–µ
        document.getElementById('grains-amount').textContent = this.formatNumber(this.user.currencies.grains);
        document.getElementById('stars-amount').textContent = this.formatNumber(this.user.currencies.stars);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫
        document.getElementById('wallet-gromd').textContent = this.formatNumber(this.user.currencies.gromd);
        document.getElementById('wallet-grains').textContent = this.formatNumber(this.user.currencies.grains);
        document.getElementById('wallet-ton').textContent = this.formatNumber(this.user.currencies.ton);
        document.getElementById('wallet-stars').textContent = this.formatNumber(this.user.currencies.stars);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–æ–º—Ü–µ
        this.updatePetUI();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        document.getElementById('admin-btn').style.display = this.user.isAdmin ? 'block' : 'none';

        console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

    updatePetUI() {
        const petData = PETS_DATA[this.currentPet.petId];
        if (!petData) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞ —Å ID:', this.currentPet.petId);
            return;
        }

        console.log('üêæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–∏—Ç–æ–º—Ü–∞:', petData.name);

        const rarity = RARITIES[petData.rarity];

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        document.getElementById('pet-image').src = petData.image;
        document.getElementById('pet-image').className = `rarity-${petData.rarity}`;
        document.getElementById('pet-name').textContent = petData.name;
        document.getElementById('pet-level').textContent = this.currentPet.level;
        document.getElementById('pet-rarity').textContent = rarity.name;
        document.getElementById('pet-rarity').className = `pet-rarity rarity-${petData.rarity}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—ã—Ç–æ—Å—Ç—å
        const satietyPercent = this.currentPet.satiety;
        document.getElementById('satiety-fill').style.width = `${satietyPercent}%`;
        document.getElementById('satiety-text').textContent = `${this.currentPet.satiety}/100`;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('farm-rate').textContent = `${petData.farmRate} –∑—ë—Ä–µ–Ω/5–º–∏–Ω`;
        document.getElementById('grains-earned').textContent = this.currentPet.grainsEarned;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è
        const feedCost = Math.floor(petData.feedCost * Math.pow(petData.costMultiplier, this.currentPet.level - 1));
        document.getElementById('feed-cost').textContent = `${feedCost} –∑—ë—Ä–µ–Ω`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.updateButtons();

        console.log('üêæ UI –ø–∏—Ç–æ–º—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω. –°—ã—Ç–æ—Å—Ç—å:', this.currentPet.satiety);
    }

    updateButtons() {
        const feedBtn = document.getElementById('feed-btn');
        const breedBtn = document.getElementById('breed-btn');

        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫. –°—ã—Ç–æ—Å—Ç—å:', this.currentPet.satiety);

        // –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
        if (this.currentPet.satiety >= 100) {
            feedBtn.classList.add('disabled');
            feedBtn.disabled = true;
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (—Å—ã—Ç–æ—Å—Ç—å 100%)');
        } else {
            feedBtn.classList.remove('disabled');
            feedBtn.disabled = false;
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
        }

        // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è
        const canBreed = this.currentPet.level >= CONFIG.MIN_BREED_LEVEL && 
                        !this.currentPet.isBreeding && 
                        this.currentPet.satiety >= 100;

        if (canBreed) {
            breedBtn.classList.remove('disabled');
            breedBtn.disabled = false;
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
        } else {
            breedBtn.classList.add('disabled');
            breedBtn.disabled = true;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if (this.currentPet.level < CONFIG.MIN_BREED_LEVEL) {
                breedBtn.querySelector('.btn-desc').textContent = `(–Ω—É–∂–µ–Ω —É—Ä. ${CONFIG.MIN_BREED_LEVEL})`;
            } else if (this.currentPet.isBreeding) {
                breedBtn.querySelector('.btn-desc').textContent = '(–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)';
            } else if (this.currentPet.satiety < 100) {
                breedBtn.querySelector('.btn-desc').textContent = '(–Ω—É–∂–Ω–∞ —Å—ã—Ç–æ—Å—Ç—å 100%)';
            } else {
                breedBtn.querySelector('.btn-desc').textContent = '(–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)';
            }
            
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }

    async feedPet() {
        console.log('üçñ –ù–∞—á–∞–ª–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è...');
        
        if (!this.currentPet) {
            this.showMessage('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞');
            return;
        }

        if (this.currentPet.satiety >= 100) {
            this.showMessage('‚ùå –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —Å—ã—Ç!');
            return;
        }

        const petData = PETS_DATA[this.currentPet.petId];
        const feedCost = Math.floor(petData.feedCost * Math.pow(petData.costMultiplier, this.currentPet.level - 1));

        console.log('üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è:', feedCost, '–ó—ë—Ä–µ–Ω —É –∏–≥—Ä–æ–∫–∞:', this.user.currencies.grains);

        if (this.user.currencies.grains < feedCost) {
            this.showMessage('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑—ë—Ä–µ–Ω!');
            return;
        }

        // –°–ø–∏—Å–∞–Ω–∏–µ –∑—ë—Ä–µ–Ω
        this.user.currencies.grains -= feedCost;

        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏
        const newSatiety = Math.min(100, this.currentPet.satiety + petData.satietyPerFeed);
        console.log('üçó –°—ã—Ç–æ—Å—Ç—å –¥–æ:', this.currentPet.satiety, '–ü–æ—Å–ª–µ:', newSatiety);
        
        this.currentPet.satiety = newSatiety;
        this.currentPet.lastFed = Date.now();

        // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ GROMD
        this.currentPet.gromdEarned += petData.gromdPerFeed;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
        this.checkLevelUp();

        this.saveGame();
        this.updateUI();
        this.showMessage(`‚úÖ –ü–∏—Ç–æ–º–µ—Ü –ø–æ–∫–æ—Ä–º–ª–µ–Ω! –°—ã—Ç–æ—Å—Ç—å: +${petData.satietyPerFeed}%`);

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.animateButton('feed-btn');
    }

    checkLevelUp() {
        const petData = PETS_DATA[this.currentPet.petId];
        const expPerFeed = 1;
        
        if (this.currentPet.level < CONFIG.MAX_PET_LEVEL) {
            const neededExp = this.currentPet.level * 10;
            if (this.currentPet.gromdEarned >= neededExp) {
                this.currentPet.level++;
                this.showMessage(`üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å ${this.currentPet.level}`);
            }
        }
    }

    async startBreeding() {
        console.log('‚ù§Ô∏è –ù–∞—á–∞–ª–æ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è...');
        
        if (!this.currentPet) {
            this.showMessage('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞');
            return;
        }

        if (this.currentPet.isBreeding) {
            this.showMessage('‚ùå –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —Ä–∞–∑–º–Ω–æ–∂–∞–µ—Ç—Å—è!');
            return;
        }

        if (this.currentPet.satiety < 100) {
            this.showMessage('‚ùå –î–ª—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—ã—Ç–æ—Å—Ç—å!');
            return;
        }

        if (this.currentPet.level < CONFIG.MIN_BREED_LEVEL) {
            this.showMessage(`‚ùå –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Å ${CONFIG.MIN_BREED_LEVEL} —É—Ä–æ–≤–Ω—è`);
            return;
        }

        this.currentPet.isBreeding = true;
        this.currentPet.breedStartTime = Date.now();
        this.currentPet.satiety = 0;

        console.log('‚ù§Ô∏è –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ');

        this.saveGame();
        this.updateUI();
        this.showMessage('‚ù§Ô∏è –ü–∏—Ç–æ–º–µ—Ü –Ω–∞—á–∞–ª —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ! –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.');

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
        this.animateButton('breed-btn');
    }

    animateButton(buttonId) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.style.transform = 'scale(0.95)';
            setTimeout(() => {
                button.style.transform = 'scale(1)';
            }, 150);
        }
    }

    checkBreedingCompletion() {
        if (!this.currentPet?.isBreeding) return;

        const breedingTime = Date.now() - this.currentPet.breedStartTime;
        console.log('‚è∞ –í—Ä–µ–º—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è:', Math.round(breedingTime/1000), '—Å–µ–∫ –∏–∑', CONFIG.BREEDING.SATIETY_DURATION/1000);
        
        if (breedingTime >= CONFIG.BREEDING.SATIETY_DURATION) {
            this.completeBreeding();
        }
    }

    completeBreeding() {
        const petData = PETS_DATA[this.currentPet.petId];
        
        console.log('üéâ –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è
        this.currentPet.isBreeding = false;
        this.currentPet.breedStartTime = null;

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        let newPetId;
        if (Math.random() < petData.breedChance) {
            // –†–æ–∂–¥–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
            newPetId = this.getNextRarityPet(petData.rarity);
            console.log('üéØ –†–æ–¥–∏–ª—Å—è –ø–∏—Ç–æ–º–µ—Ü –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏!');
        } else {
            // –†–æ–∂–¥–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
            newPetId = this.currentPet.petId;
            console.log('üêæ –†–æ–¥–∏–ª—Å—è –æ–±—ã—á–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü');
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        const newPet = {
            id: this.generatePetId([newPetId, 0, 0, 0, 0]),
            petId: newPetId,
            accessories: [0, 0, 0, 0, 0],
            level: 1,
            satiety: 100,
            grainsEarned: 0,
            gromdEarned: 0,
            lastFed: Date.now(),
            isBreeding: false,
            breedStartTime: null
        };

        this.inventory.pets.push(newPet);
        this.saveGame();
        this.updateUI();
        this.showMessage('üéâ –†–æ–¥–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.');
    }

    getNextRarityPet(currentRarity) {
        const rarities = ['common', 'uncommon', 'rare', 'epic', 'legendary'];
        const currentIndex = rarities.indexOf(currentRarity);
        const nextIndex = Math.min(currentIndex + 1, rarities.length - 1);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–∏—Ç–æ–º—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        const nextRarity = rarities[nextIndex];
        const availablePets = Object.values(PETS_DATA).filter(pet => pet.rarity === nextRarity);
        
        return availablePets.length > 0 ? availablePets[0].id : this.currentPet.petId;
    }

    generatePetId(accessories) {
        return accessories.join('.');
    }

    loadInventoryData() {
        this.loadPetsInventory();
        this.loadAccessoriesInventory();
    }

    loadPetsInventory() {
        const petsGrid = document.getElementById('pets-grid');
        if (!petsGrid) return;

        petsGrid.innerHTML = '';

        this.inventory.pets.forEach((pet, index) => {
            const petData = PETS_DATA[pet.petId];
            if (!petData) return;

            const petCard = document.createElement('div');
            petCard.className = `item-card rarity-${petData.rarity}`;
            petCard.innerHTML = `
                <img src="${petData.image}" alt="${petData.name}" class="item-image">
                <div class="item-name">${petData.name}</div>
                <div class="item-rarity rarity-${petData.rarity}">${RARITIES[petData.rarity].name}</div>
                <div class="item-level">–£—Ä. ${pet.level}</div>
            `;

            petCard.addEventListener('click', () => {
                this.selectPet(pet);
            });

            petsGrid.appendChild(petCard);
        });

        document.getElementById('pets-count').textContent = this.inventory.pets.length;
    }

    loadAccessoriesInventory() {
        const accessoriesGrid = document.getElementById('accessories-grid');
        if (!accessoriesGrid) return;

        accessoriesGrid.innerHTML = '';

        // –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
        const testAccessories = [
            {
                id: "2.1",
                name: "–ó–æ–ª–æ—Ç–∞—è –∫–æ—Ä–æ–Ω–∞",
                rarity: "legendary", 
                image: "https://via.placeholder.com/60/ffd700/000000?text=üëë",
                farmBonus: 20
            }
        ];

        testAccessories.forEach(accData => {
            const accCard = document.createElement('div');
            accCard.className = `item-card rarity-${accData.rarity}`;
            accCard.innerHTML = `
                <img src="${accData.image}" alt="${accData.name}" class="item-image">
                <div class="item-name">${accData.name}</div>
                <div class="item-rarity rarity-${accData.rarity}">${RARITIES[accData.rarity].name}</div>
                <div class="item-bonus">+${accData.farmBonus} —Ñ–∞—Ä–º</div>
            `;

            accessoriesGrid.appendChild(accCard);
        });

        document.getElementById('accessories-count').textContent = testAccessories.length;
    }

    loadMarketData() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä—ã–Ω–∫–∞
        const marketPetsList = document.getElementById('market-pets-list');
        const marketAccessoriesList = document.getElementById('market-accessories-list');

        if (marketPetsList) {
            marketPetsList.innerHTML = `
                <div class="coming-soon">
                    <div style="text-align: center; padding: 40px 20px; color: #666;">
                        <div style="font-size: 48px; margin-bottom: 16px;">üè™</div>
                        <div style="font-size: 16px; font-weight: 600;">–†—ã–Ω–æ–∫ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–∫–æ—Ä–æ!</div>
                        <div style="font-size: 14px; margin-top: 8px;">–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤</div>
                    </div>
                </div>
            `;
        }

        if (marketAccessoriesList) {
            marketAccessoriesList.innerHTML = `
                <div class="coming-soon">
                    <div style="text-align: center; padding: 40px 20px; color: #666;">
                        <div style="font-size: 48px; margin-bottom: 16px;">üõçÔ∏è</div>
                        <div style="font-size: 16px; font-weight: 600;">–†—ã–Ω–æ–∫ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤</div>
                        <div style="font-size: 14px; margin-top: 8px;">–°–∫–æ—Ä–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏</div>
                    </div>
                </div>
            `;
        }
    }

    selectPet(pet) {
        this.currentPet = pet;
        this.showScreen('pet-screen');
        this.updateUI();
        this.showMessage(`–í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü: ${PETS_DATA[pet.petId].name}`);
    }

    startBackgroundProcesses() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        setInterval(() => {
            this.checkBreedingCompletion();
        }, 1000);

        // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑—ë—Ä–µ–Ω –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        setInterval(() => {
            this.calculateEarnings();
        }, 10000);

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.saveGame();
        }, 30000);

        console.log('‚úÖ –§–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã');
    }

    calculateEarnings() {
        if (!this.currentPet) return;

        const petData = PETS_DATA[this.currentPet.petId];
        let farmRate = petData.farmRate;

        // –ë–æ–Ω—É—Å –æ—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        this.currentPet.accessories.forEach((accId, index) => {
            if (accId > 0) {
                const accessoryKey = `${index + 2}.${accId}`;
                const accessory = ACCESSORIES_DATA[accessoryKey];
                if (accessory) {
                    farmRate += accessory.farmBonus;
                }
            }
        });

        // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑—ë—Ä–µ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        const earnings = Math.floor(farmRate * (this.currentPet.satiety / 100) / 12); // –î–µ–ª–∏–º –Ω–∞ 12 —Ç.–∫. –∏–Ω—Ç–µ—Ä–≤–∞–ª 10 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 5 –º–∏–Ω
        if (earnings > 0) {
            this.currentPet.grainsEarned += earnings;
            this.user.currencies.grains += earnings;
            console.log('üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑—ë—Ä–µ–Ω:', earnings);
        }

        this.saveGame();
        this.updateUI();
    }

    toggleAdminPanel() {
        const panel = document.getElementById('admin-panel');
        panel.classList.toggle('hidden');
        console.log('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', panel.classList.contains('hidden') ? '—Å–∫—Ä—ã—Ç–∞' : '–æ—Ç–∫—Ä—ã—Ç–∞');
    }

    resetGame() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É?')) {
            localStorage.removeItem('petGameData');
            location.reload();
        }
    }

    addCurrency() {
        this.user.currencies.grains += 1000;
        this.user.currencies.stars += 100;
        this.user.currencies.gromd += 50;
        this.saveGame();
        this.updateUI();
        this.showMessage('üí∞ –í–∞–ª—é—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        this.toggleAdminPanel();
    }

    viewPlayers() {
        this.showMessage('üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
        this.toggleAdminPanel();
    }

    showExchangeModal() {
        this.showMessage('üí± –û–±–º–µ–Ω –≤–∞–ª—é—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    }

    showWithdrawModal() {
        this.showMessage('üè¶ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∞–∏—Ä–¥—Ä–æ–ø–∞');
    }

    showMessage(text) {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const message = document.createElement('div');
        message.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 16px 24px;
            border-radius: 12px;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            border: 1px solid #333;
            backdrop-filter: blur(10px);
            font-weight: 600;
            max-width: 80%;
        `;
        message.textContent = text;
        document.body.appendChild(message);

        setTimeout(() => {
            if (document.body.contains(message)) {
                document.body.removeChild(message);
            }
        }, 3000);
    }

    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(num);
    }

    saveGame() {
        const gameData = {
            user: this.user,
            inventory: this.inventory,
            currentPet: this.currentPet
        };
        localStorage.setItem('petGameData', JSON.stringify(gameData));
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
    window.game = new PetGame();
});

// –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugGame = function() {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –∏–≥—Ä—ã:');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', window.game?.user);
    console.log('üêæ –¢–µ–∫—É—â–∏–π –ø–∏—Ç–æ–º–µ—Ü:', window.game?.currentPet);
    console.log('üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:', window.game?.inventory);
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', localStorage.getItem('petGameData'));
};