// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
class AdvancedSecurity {
    constructor() {
        this.checksums = {};
        this.suspiciousActions = [];
        this.autoSaveInterval = null;
        this.init();
    }

    init() {
        this.generateChecksums();
        this.setupEnvironmentChecks();
        this.setupMutationObserver();
        this.setupDevToolsDetection();
        this.startIntegrityChecks();
        this.setupAutoSave();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
    generateChecksums() {
        this.checksums = {
            config: this.hashCode(JSON.stringify(CONFIG)),
            pets: this.hashCode(JSON.stringify(PETS_DATA)),
            accessories: this.hashCode(JSON.stringify(ACCESSORIES_DATA))
        };
    }

    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ DevTools
    setupDevToolsDetection() {
        const checkDevTools = () => {
            const widthThreshold = window.outerWidth - window.innerWidth > 100;
            const heightThreshold = window.outerHeight - window.innerHeight > 100;
            
            if (widthThreshold || heightThreshold) {
                this.logSuspiciousActivity('DevTools –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
                this.lockGame('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
            }
        };

        setInterval(checkDevTools, 1000);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const element = new Image();
        Object.defineProperty(element, 'id', {
            get: () => {
                this.logSuspiciousActivity('–û–±—Ö–æ–¥ –∫–æ–Ω—Å–æ–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
                this.lockGame('–ü–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
            }
        });
    }

    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
    setupMutationObserver() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes') {
                    this.logSuspiciousActivity('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ DOM', {
                        element: mutation.target.tagName,
                        attribute: mutation.attributeName
                    });
                }
            });
        });

        observer.observe(document.body, {
            attributes: true,
            childList: true,
            subtree: true
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setupEnvironmentChecks() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ—Ç–æ–≤ –∏ —ç–º—É–ª—è—Ç–æ—Ä—ã
        if (navigator.webdriver || window.callPhantom || window._phantom) {
            this.lockGame('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        if (screen.width < 300 || screen.height < 300) {
            this.logSuspiciousActivity('–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ User Agent
        const userAgent = navigator.userAgent.toLowerCase();
        if (userAgent.includes('headless') || userAgent.includes('phantom')) {
            this.lockGame('–û–±–Ω–∞—Ä—É–∂–µ–Ω headless-–±—Ä–∞—É–∑–µ—Ä');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    startIntegrityChecks() {
        setInterval(() => {
            this.verifyGameData();
            this.verifyCurrencyValues();
            this.detectSpeedHacks();
        }, 5000);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
    verifyGameData() {
        const currentConfigHash = this.hashCode(JSON.stringify(CONFIG));
        if (currentConfigHash !== this.checksums.config) {
            this.lockGame('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤–∞–ª—é—Ç
        this.verifyCurrencyValues();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
    verifyCurrencyValues() {
        const currencies = window.game?.user?.currencies;
        if (!currencies) return;

        const limits = {
            grains: 1000000,
            gromd: 100000,
            ton: 10000,
            stars: 50000
        };

        for (const [currency, value] of Object.entries(currencies)) {
            if (value > limits[currency]) {
                this.logSuspiciousActivity(`–ê–Ω–æ–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã: ${currency} = ${value}`);
                this.correctCurrencyValues();
                break;
            }

            if (value < 0) {
                this.logSuspiciousActivity(`–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã: ${currency}`);
                this.correctCurrencyValues();
                break;
            }
        }
    }

    // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–≥—Ä—ã
    detectSpeedHacks() {
        const now = Date.now();
        if (window.lastTimeCheck) {
            const diff = now - window.lastTimeCheck;
            if (diff < 900 || diff > 1100) { // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å ~1000ms
                this.logSuspiciousActivity('–í–æ–∑–º–æ–∂–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏', { timeDiff: diff });
            }
        }
        window.lastTimeCheck = now;
    }

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    setupAutoSave() {
        this.autoSaveInterval = setInterval(() => {
            if (window.game && !this.cheatDetected) {
                const savedData = localStorage.getItem('petGameData');
                if (savedData) {
                    try {
                        const data = JSON.parse(savedData);
                        this.verifySaveData(data);
                    } catch (e) {
                        this.logSuspiciousActivity('–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
                    }
                }
            }
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    verifySaveData(data) {
        if (!data.user || !data.inventory) {
            this.logSuspiciousActivity('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const requiredUserFields = ['id', 'currencies', 'firstName'];
        for (const field of requiredUserFields) {
            if (!data.user[field]) {
                this.logSuspiciousActivity(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${field}`);
                return false;
            }
        }

        return true;
    }

    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤–∞–ª—é—Ç
    correctCurrencyValues() {
        if (!window.game?.user) return;

        const currencies = window.game.user.currencies;
        const limits = {
            grains: 1000000,
            gromd: 100000,
            ton: 10000,
            stars: 50000
        };

        for (const [currency, limit] of Object.entries(limits)) {
            if (currencies[currency] > limit) {
                currencies[currency] = Math.floor(limit * 0.8);
            }
            if (currencies[currency] < 0) {
                currencies[currency] = 0;
            }
        }

        window.game.saveGame();
        this.showSecurityMessage('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏. –ó–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã.');
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    logSuspiciousActivity(type, data = {}) {
        const activity = {
            type,
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            ...data
        };

        this.suspiciousActions.push(activity);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const existingLogs = JSON.parse(localStorage.getItem('securityLogs') || '[]');
        existingLogs.push(activity);
        localStorage.setItem('securityLogs', JSON.stringify(existingLogs.slice(-100))); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π

        console.warn('üîí Security Alert:', activity);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        this.reportToServer(activity);
    }

    // –û—Ç—á–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async reportToServer(activity) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
            if (window.game?.user) {
                activity.userId = window.game.user.id;
            }
            
            // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–µ—Ä–≤–µ—Ä)
            // await fetch('https://your-server.com/security-log', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify(activity)
            // });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
        }
    }

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–≥—Ä—ã
    lockGame(reason) {
        this.cheatDetected = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        document.body.innerHTML = `
            <div style="
                background: #000;
                color: #fff;
                height: 100vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                font-family: Arial, sans-serif;
                text-align: center;
                padding: 20px;
            ">
                <h1 style="color: #ff4444;">üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –≤–∑–ª–æ–º–∞</h1>
                <p>–ü—Ä–∏—á–∏–Ω–∞: ${reason}</p>
                <p>–ò–≥—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</p>
                <p style="margin-top: 20px; font-size: 12px; color: #888;">
                    ID –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: ${Date.now()}
                </p>
            </div>
        `;

        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('petGameData');
        
        throw new Error(`Game locked: ${reason}`);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    showSecurityMessage(text) {
        const message = document.createElement('div');
        message.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #ff4444;
            color: white;
            padding: 20px;
            border-radius: 10px;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
        `;
        message.textContent = text;
        document.body.appendChild(message);

        setTimeout(() => {
            document.body.removeChild(message);
        }, 5000);
    }

    // –•–µ—à-—Ñ—É–Ω–∫—Ü–∏—è
    hashCode(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash.toString(36);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    getSecurityLogs() {
        return this.suspiciousActions;
    }

    // –°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    resetSecurity() {
        this.suspiciousActions = [];
        this.cheatDetected = false;
        localStorage.removeItem('securityLogs');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
window.securitySystem = new AdvancedSecurity();